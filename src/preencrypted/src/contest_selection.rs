use std::rc::Rc;

use eg::{
    ballot::BallotConfig, contest::ContestOption, contest_selection::ContestSelectionCiphertext,
    device::Device, fixed_parameters::FixedParameters, hash::HValue, key::Ciphertext,
    nizk::ProofRange,
};
use serde::{Deserialize, Serialize};
use util::{csprng::Csprng, z_mul_prime::ZMulPrime};

use crate::{
    ballot_encrypting_tool::{generate_selection_hash, generate_short_code},
    nonce::option_nonce,
};

/// A contest option in a pre-encrypted ballot.
#[derive(Debug, Serialize, Deserialize)]
pub struct ContestSelectionPreEncrypted {
    /// Label
    pub label: String,

    /// Vector of ciphertexts used to represent the selection
    pub selections: Vec<ContestSelectionCiphertext>,

    /// Shortcode for this option generated by hash trimming
    pub shortcode: String,

    /// Selection hash
    pub crypto_hash: HValue,
}

impl ContestSelectionPreEncrypted {
    pub fn get_label(&self) -> &String {
        &self.label
    }

    pub fn get_selections(&self) -> &Vec<ContestSelectionCiphertext> {
        &self.selections
    }

    pub fn get_crypto_hash(&self) -> &HValue {
        &self.crypto_hash
    }

    pub fn regenerate_nonces(
        &mut self,
        device: &Device,
        primary_nonce: &[u8],
        contest_label: &String,
        selection_labels: &Vec<String>,
        j: usize,
    ) {
        for k in 0..self.selections.len() {
            self.selections[k].nonce = option_nonce(
                device,
                primary_nonce,
                contest_label.as_bytes(),
                selection_labels[j].as_bytes(),
                selection_labels[k].as_bytes(),
            );
        }
    }

    pub fn new(
        device: &Device,
        primary_nonce: &[u8],
        selection: &ContestOption,
        contest_label: &String,
        selection_labels: &Vec<String>,
        j: usize,
        length: usize,
    ) -> ContestSelectionPreEncrypted {
        let label = selection.label.clone();
        let selections = (0..length)
            .map(|k| {
                let ciphertext: Ciphertext;
                let nonce = option_nonce(
                    device,
                    primary_nonce,
                    contest_label.as_bytes(),
                    selection_labels[j].as_bytes(),
                    selection_labels[k].as_bytes(),
                );
                ciphertext = device.config.election_public_key.encrypt_with(
                    &device.election_parameters.fixed_parameters,
                    &nonce,
                    (j == k) as usize,
                );
                ContestSelectionCiphertext { ciphertext, nonce }
            })
            .collect::<Vec<ContestSelectionCiphertext>>();

        let crypto_hash = generate_selection_hash(&device.config, selections.as_ref());
        let shortcode = generate_short_code(&crypto_hash);

        // Generate pre-encrypted votes for each possible (single) choice
        ContestSelectionPreEncrypted {
            label,
            selections,
            shortcode,
            crypto_hash,
        }
    }

    pub fn proof_ballot_correctness(
        &self,
        device: &Device,
        csprng: &mut Csprng,
        sequence_order: usize,
        zmulq: Rc<ZMulPrime>,
    ) -> Vec<ProofRange> {
        let mut proofs = <Vec<ProofRange>>::new();
        for (i, selection) in self.selections.iter().enumerate() {
            proofs.push(selection.proof_ballot_correctness(
                device,
                csprng,
                sequence_order == i,
                zmulq.clone(),
            ));
        }
        proofs
    }
}
